import numpy as np

#Linear Regression
class Linear_Regression():
    def __init__(self,learning_rate, no_of_iterations):            #initialization function
        
        self.learning_rate = learning_rate
        self.no_of_iterations = no_of_iterations
        
    def fit(self, X, Y):                 #fit function to train the data , x-experience, y - salary
        #no.of training examples and number of features
        self.m , self.n  = X.shape     #no.of rows and no.of columns

        self.w = np.zeros(self.n)
        self.b = 0
        self.X = X
        self.Y = Y
        
        for i in range(self.no_of_iterations):
          self.update_weight()

    
    def update_weight( self ):        #function to update the weight
        Y_prediction = self.predict(self.X)

        #Calculating the gradients
        
        dw = - ( 2 * (self.X.T ).dot( self.Y - Y_prediction)) / self.m
        db = - 2 * np.sum( self.Y - Y_prediction ) / self.m

        #updating the weights

        self.w = self.w - self.learning_rate*dw
        self.b = self.b - self.learning_rate*db
            

    def predict(self, X):              #used for predicting by giving a parameter

        return X.dot(self.w) + self.b        #y = mx+c