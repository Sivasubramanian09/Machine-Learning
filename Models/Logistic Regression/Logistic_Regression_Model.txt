import numpy as np

#Logistic Regression

class Logistic_Regression():
    def __init__(self,learning_rate, no_of_iterrations ):  #Initiating the parameters
       
        self.learning_rate = learning_rate
        self.no_of_iterrations = no_of_iterrations

    
    def fit(self,X,Y):

        #number of data points in the dataset is equal to the number of rows-> m
        #number of input features in the dataset is equal to the number of columns - > n
        self.m, self.n = X.shape

        #Initiating the weight & bias

        self.w = np.zeros(self.n)

        self.b = 0
        self.X = X
        self.Y = Y

        for i in range(no_of_iterrations):
            self.update_weights()
           
    def update_weights(self):

        #Y_hat formula (Sigmoid Formula)

        Y_hat = 1 / (1 + np.exp[-(self.X.dot(self.w) + self.b)])  #using dot becasuse of matrix multiplication

        dw = (1/self.m)* np.dot(self.X.T, (Y_hat - self.Y))    #we are using tranpose to match the rows and colums
    
        db = (1/self.m)* np.sum(Y_hat - self.Y)

        #updating the weights and bias

        self.w = self.w - self.learning_rate *dw

        self.b = self.b - self.learning_rate *db
    
    def predict(self,):

        Y_pred = 1 / (1 + np.exp[-(self.X.dot(self.w) + self.b)])

        Y_pred = np.where(Y_pred > 0.5,1,0)

        return Y_pred
    