#Support Vector Machine Classifier:

class SVM_classifier():

    def __init__(self,learning_rate, no_of_iterrations,lambda_parameter):

        self.learning_rate = learning_rate 
        self.no_of_iterrations = no_of_iterrations
        self.lambda_parameter = lambda_parameter

    def fit(self,X,Y):

        self.m, self.n = X.shape

        #Initiating the weight & bias

        self.w = np.zeros(self.n)

        self.b = 0
        self.X = X
        self.Y = Y

        for i in range(no_of_iterrations):
            self.update_weights()

    def update_weights():
        y_label = np.where(self.Y <= 0, -1, 1)

        #for gradients
        for index,x_i in enumerate(self.x):
            condition = y_label[index] * (np.dot(x_i,self.w) - self.b) >= 1

        if (condition == True):
             dw = 2*self.lambda_parameter* self.w
             db = 0
        else:
             dw = 2*self.lambda_parameter.self.w - np.dot(x_i,y_label[index])
             db = y_label[index]
    def predict(self):

        out = np.dot(X,self.w) - self.b

        predicted_output = np.sign(output)

        y_hat = np.where(predicted_label <= -1,0,1)

        return y_hat()

        